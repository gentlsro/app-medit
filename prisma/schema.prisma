//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "postgresqlExtensions"]
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true
  writeBarrelFiles                 = true
  createInputTypes                 = true
  createModelTypes                 = false
  addInputTypeValidation           = true
  addIncludeType                   = true
  addSelectType                    = true
  validateWhereUniqueInput         = false
  createOptionalDefaultValuesTypes = false
  createRelationValuesTypes        = false
  createPartialTypes               = false
  useDefaultValidators             = true
  coerceDate                       = true
  writeNullishInModelTypes         = true
}

enum UserTypeEnum {
  PATIENT
  MEDICAL_PERSON
  CLINIC
}

enum FileOnUserTypeEnum {
  VERIFICATION
  DOCUMENT
}

enum FileOnUserKindEnum {
  ID_CARD
  PASSPORT
  MEDICAL_IDENTIFICATION
}

model User {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt     DateTime       @default(now())
  /// Identifier of the user who created the record
  createdById   Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt     DateTime?
  /// Identifier of the user who last updated the record
  updatedById   Int?
  /// Indicates whether the record is marked as deleted
  deleted       Boolean        @default(false)
  /// Date and time of deletion of the record
  deletedAt     DateTime?
  /// Identifier of the user who deleted the record
  deletedById   Int?
  id            Int            @id() @default(autoincrement())
  /// First name of the user
  /// @zod.string.min(1).max(255)
  firstName     String
  /// Last name of the user
  /// @zod.string.min(1).max(255)
  lastName      String
  /// Email address of the user
  /// @zod.string.email()
  email         String         @unique()
  /// Password of the user
  password      String
  /// The type of the user
  type          UserTypeEnum   @default(PATIENT)
  /// Birth of the user
  /// @zod.number.min(1900).max(2025)
  birthYear     Int
  /// Country of the user
  /// @zod.string.min(1).max(255)
  country       String
  /// City of the user
  /// @zod.string.min(1).max(255)
  city          String
  /// Payment detail of the user
  paymentDetail PaymentDetail?
  /// Files of the user
  files         FileOnUser[]
}

model FileOnUser {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt   DateTime           @default(now())
  /// Identifier of the user who created the record
  createdById Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt   DateTime?
  /// Identifier of the user who last updated the record
  updatedById Int?
  /// Indicates whether the record is marked as deleted
  deleted     Boolean            @default(false)
  /// Date and time of deletion of the record
  deletedAt   DateTime?
  /// Identifier of the user who deleted the record
  deletedById Int?
  id          Int                @id() @default(autoincrement())
  /// Type of the file
  type        FileOnUserTypeEnum @default(DOCUMENT)
  /// Kind of the vertification (if applicable)
  kind        FileOnUserKindEnum @default(ID_CARD)
  /// Approved
  approved    Boolean            @default(false)
  /// User ID the file belongs to
  userId      Int
  /// User the file belongs to
  user        User               @relation(fields: [userId], references: [id])
  /// File ID the file belongs to
  fileId      Int
  /// File the file belongs to
  file        File               @relation(fields: [fileId], references: [id])
}

model File {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt   DateTime     @default(now())
  /// Identifier of the user who created the record
  createdById Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt   DateTime?
  /// Identifier of the user who last updated the record
  updatedById Int?
  /// Indicates whether the record is marked as deleted
  deleted     Boolean      @default(false)
  /// Date and time of deletion of the record
  deletedAt   DateTime?
  /// Identifier of the user who deleted the record
  deletedById Int?
  id          Int          @id() @default(autoincrement())
  /// File name
  name        String
  /// File type
  type        String
  /// File size
  size        Int
  /// File path
  path        String       @unique()
  /// User ID the file belongs to
  users       FileOnUser[]
}

model PaymentDetail {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt     DateTime  @default(now())
  /// Identifier of the user who created the record
  createdById   Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt     DateTime?
  /// Identifier of the user who last updated the record
  updatedById   Int?
  /// Indicates whether the record is marked as deleted
  deleted       Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt     DateTime?
  /// Identifier of the user who deleted the record
  deletedById   Int?
  id            Int       @id() @default(autoincrement())
  /// Bank account number
  accountNumber String
  /// User ID the payment detail belongs to
  userId        Int       @unique()
  /// User the payment detail belongs to
  user          User      @relation(fields: [userId], references: [id])
}
